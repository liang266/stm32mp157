From 4c6b25aa88e0bc1ac4dfb2871cae4d6ae98f515f Mon Sep 17 00:00:00 2001
From: lianglulu <2042213396@qq.cm>
Date: Tue, 31 May 2022 15:36:42 +0800
Subject: [PATCH 2/2] feat : support alientek stm32mp157 mini board

---
 arch/arm/dts/Makefile                    |   7 +
 arch/arm/dts/stm32mp15-pinctrl.dtsi      |   9 +-
 arch/arm/dts/stm32mp157d-atk-u-boot.dtsi | 202 +++++++++++++
 arch/arm/dts/stm32mp157d-atk.dts         | 132 +++++++++
 arch/arm/dts/stm32mp157d-atk.dtsi        | 343 +++++++++++++++++++++++
 common/board_r.c                         |  79 ++++++
 common/image-fdt.c                       |  16 +-
 configs/stm32mp157d_atk_defconfig        | 145 ++++++++++
 configs/stm32mp15_atk_trusted_defconfig  | 145 ++++++++++
 drivers/net/phy/phy.c                    | 112 ++++++++
 drivers/video/stm32/stm32_ltdc.c         | 103 +++++++
 include/config_distro_bootcmd.h          |   6 +
 include/configs/stm32mp1.h               |   4 +
 13 files changed, 1296 insertions(+), 7 deletions(-)
 create mode 100644 arch/arm/dts/stm32mp157d-atk-u-boot.dtsi
 create mode 100644 arch/arm/dts/stm32mp157d-atk.dts
 create mode 100644 arch/arm/dts/stm32mp157d-atk.dtsi
 create mode 100644 configs/stm32mp157d_atk_defconfig
 create mode 100644 configs/stm32mp15_atk_trusted_defconfig

diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index c3fd89b8..b256676d 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -1,5 +1,11 @@
 # SPDX-License-Identifier: GPL-2.0+
 
+DEVICE_TREE_EXT ?=
+
+ifneq ($(DEVICE_TREE_EXT),)
+dtb-y += $(DEVICE_TREE_EXT)
+endif
+
 dtb-$(CONFIG_TARGET_SMARTWEB) += at91sam9260-smartweb.dtb
 dtb-$(CONFIG_TARGET_TAURUS) += at91sam9g20-taurus.dtb
 dtb-$(CONFIG_TARGET_CORVUS) += at91sam9g45-corvus.dtb
@@ -831,6 +837,7 @@ dtb-$(CONFIG_STM32MP15x) += \
 	stm32mp157c-dk2.dtb \
 	stm32mp157c-ed1.dtb \
 	stm32mp157c-ev1.dtb \
+	stm32mp157d-atk.dtb \
 	stm32mp157d-dk1.dtb \
 	stm32mp157d-ed1.dtb \
 	stm32mp157d-ev1.dtb \
diff --git a/arch/arm/dts/stm32mp15-pinctrl.dtsi b/arch/arm/dts/stm32mp15-pinctrl.dtsi
index b8e82ade..918bc5c4 100644
--- a/arch/arm/dts/stm32mp15-pinctrl.dtsi
+++ b/arch/arm/dts/stm32mp15-pinctrl.dtsi
@@ -587,16 +587,17 @@
 
 	pwm3_pins_a: pwm3-0 {
 		pins {
-			pinmux = <STM32_PINMUX('C', 7, AF2)>; /* TIM3_CH2 */
+//			pinmux = <STM32_PINMUX('C', 7, AF2)>; /* TIM3_CH2 */
 			bias-pull-down;
 			drive-push-pull;
 			slew-rate = <0>;
 		};
 	};
 
+
 	pwm3_sleep_pins_a: pwm3-sleep-0 {
 		pins {
-			pinmux = <STM32_PINMUX('C', 7, ANALOG)>; /* TIM3_CH2 */
+//			pinmux = <STM32_PINMUX('C', 7, ANALOG)>; /* TIM3_CH2 */
 		};
 	};
 
@@ -884,7 +885,7 @@
 	sdmmc1_dir_pins_a: sdmmc1-dir-0 {
 		pins1 {
 			pinmux = <STM32_PINMUX('F', 2, AF11)>, /* SDMMC1_D0DIR */
-				 <STM32_PINMUX('C', 7, AF8)>, /* SDMMC1_D123DIR */
+//				 <STM32_PINMUX('C', 7, AF8)>, /* SDMMC1_D123DIR */
 				 <STM32_PINMUX('B', 9, AF11)>; /* SDMMC1_CDIR */
 			slew-rate = <1>;
 			drive-push-pull;
@@ -899,7 +900,7 @@
 	sdmmc1_dir_sleep_pins_a: sdmmc1-dir-sleep-0 {
 		pins {
 			pinmux = <STM32_PINMUX('F', 2, ANALOG)>, /* SDMMC1_D0DIR */
-				 <STM32_PINMUX('C', 7, ANALOG)>, /* SDMMC1_D123DIR */
+//				 <STM32_PINMUX('C', 7, ANALOG)>, /* SDMMC1_D123DIR */
 				 <STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC1_CDIR */
 				 <STM32_PINMUX('E', 4, ANALOG)>; /* SDMMC1_CKIN */
 		};
diff --git a/arch/arm/dts/stm32mp157d-atk-u-boot.dtsi b/arch/arm/dts/stm32mp157d-atk-u-boot.dtsi
new file mode 100644
index 00000000..973cc8e7
--- /dev/null
+++ b/arch/arm/dts/stm32mp157d-atk-u-boot.dtsi
@@ -0,0 +1,202 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright : STMicroelectronics 2018
+ */
+
+#include <dt-bindings/clock/stm32mp1-clksrc.h>
+#include "stm32mp15-u-boot.dtsi"
+#include "stm32mp15-ddr3-2x4Gb-1066-binG.dtsi"
+
+/ {
+	aliases {
+		i2c3 = &i2c4;
+		mmc0 = &sdmmc1;
+		mmc1 = &sdmmc2;
+	};
+
+	config {
+		u-boot,boot-led = "heartbeat";
+		u-boot,error-led = "error";
+		u-boot,mmc-env-partition = "ssbl";
+	};
+
+	led {
+	};
+};
+
+#ifndef CONFIG_STM32MP1_TRUSTED
+&clk_hse {
+	st,digbypass;
+};
+
+&i2c4 {
+	u-boot,dm-pre-reloc;
+};
+
+&i2c4_pins_a {
+	u-boot,dm-pre-reloc;
+	pins {
+		u-boot,dm-pre-reloc;
+	};
+};
+
+&rcc {
+	st,clksrc = <
+		CLK_MPU_PLL1P
+		CLK_AXI_PLL2P
+		CLK_MCU_PLL3P
+		CLK_PLL12_HSE
+		CLK_PLL3_HSE
+		CLK_PLL4_HSE
+		CLK_RTC_LSE
+		CLK_MCO1_DISABLED
+		CLK_MCO2_DISABLED
+	>;
+
+	st,clkdiv = <
+		1 /*MPU*/
+		0 /*AXI*/
+		0 /*MCU*/
+		1 /*APB1*/
+		1 /*APB2*/
+		1 /*APB3*/
+		1 /*APB4*/
+		2 /*APB5*/
+		23 /*RTC*/
+		0 /*MCO1*/
+		0 /*MCO2*/
+	>;
+
+	st,pkcs = <
+		CLK_CKPER_HSE
+		CLK_FMC_ACLK
+		CLK_QSPI_ACLK
+		CLK_ETH_DISABLED
+		CLK_SDMMC12_PLL4P
+		CLK_DSI_DSIPLL
+		CLK_STGEN_HSE
+		CLK_USBPHY_HSE
+		CLK_SPI2S1_PLL3Q
+		CLK_SPI2S23_PLL3Q
+		CLK_SPI45_HSI
+		CLK_SPI6_HSI
+		CLK_I2C46_HSI
+		CLK_SDMMC3_PLL4P
+		CLK_USBO_USBPHY
+		CLK_ADC_CKPER
+		CLK_CEC_LSE
+		CLK_I2C12_HSI
+		CLK_I2C35_HSI
+		CLK_UART1_HSI
+		CLK_UART24_HSI
+		CLK_UART35_HSI
+		CLK_UART6_HSI
+		CLK_UART78_HSI
+		CLK_SPDIF_PLL4P
+		CLK_FDCAN_PLL4R
+		CLK_SAI1_PLL3Q
+		CLK_SAI2_PLL3Q
+		CLK_SAI3_PLL3Q
+		CLK_SAI4_PLL3Q
+		CLK_RNG1_LSI
+		CLK_RNG2_LSI
+		CLK_LPTIM1_PCLK1
+		CLK_LPTIM23_PCLK3
+		CLK_LPTIM45_LSE
+	>;
+
+	/* VCO = 1066.0 MHz => P = 266 (AXI), Q = 533 (GPU), R = 533 (DDR) */
+	pll2: st,pll@1 {
+		compatible = "st,stm32mp1-pll";
+		reg = <1>;
+		cfg = < 2 65 1 0 0 PQR(1,1,1) >;
+		frac = < 0x1400 >;
+		u-boot,dm-pre-reloc;
+	};
+
+	/* VCO = 417.8 MHz => P = 209, Q = 24, R = 11 */
+	pll3: st,pll@2 {
+		compatible = "st,stm32mp1-pll";
+		reg = <2>;
+		cfg = < 1 33 1 16 36 PQR(1,1,1) >;
+		frac = < 0x1a04 >;
+		u-boot,dm-pre-reloc;
+	};
+
+	/* VCO = 594.0 MHz => P = 99, Q = 74, R = 74 */
+	pll4: st,pll@3 {
+		compatible = "st,stm32mp1-pll";
+		reg = <3>;
+		cfg = < 3 98 5 7 7 PQR(1,1,1) >;
+		u-boot,dm-pre-reloc;
+	};
+};
+
+&sdmmc1 {
+	u-boot,dm-spl;
+};
+
+&sdmmc1_b4_pins_a {
+	u-boot,dm-spl;
+	pins1 {
+		u-boot,dm-spl;
+	};
+	pins2 {
+		u-boot,dm-spl;
+	};
+};
+
+&sdmmc1_dir_pins_a {
+	u-boot,dm-spl;
+	pins1 {
+		u-boot,dm-spl;
+	};
+	pins2 {
+		u-boot,dm-spl;
+	};
+};
+
+&sdmmc2 {
+	u-boot,dm-spl;
+};
+
+&sdmmc2_b4_pins_a {
+	u-boot,dm-spl;
+	pins1 {
+		u-boot,dm-spl;
+	};
+	pins2 {
+		u-boot,dm-spl;
+	};
+};
+
+&sdmmc2_d47_pins_a {
+	u-boot,dm-spl;
+	pins {
+		u-boot,dm-spl;
+	};
+};
+#endif
+
+&uart4 {
+	u-boot,dm-pre-reloc;
+};
+
+&usbotg_hs {
+	u-boot,force-b-session-valid;
+	hnp-srp-disable;
+	/* TEMP: force peripheral for USB OTG */
+	dr_mode = "peripheral";
+};
+
+&uart4_pins_a {
+	u-boot,dm-pre-reloc;
+	pins1 {
+		u-boot,dm-pre-reloc;
+	};
+	pins2 {
+		u-boot,dm-pre-reloc;
+		/* pull-up on rx to avoid floating level */
+		bias-pull-up;
+	};
+};
diff --git a/arch/arm/dts/stm32mp157d-atk.dts b/arch/arm/dts/stm32mp157d-atk.dts
new file mode 100644
index 00000000..a53ac48c
--- /dev/null
+++ b/arch/arm/dts/stm32mp157d-atk.dts
@@ -0,0 +1,132 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
+/*
+ * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
+ * Author: Alexandre Torgue <alexandre.torgue@st.com> for STMicroelectronics.
+ */
+/dts-v1/;
+
+#include "stm32mp157.dtsi"
+#include "stm32mp15xd.dtsi"
+#include "stm32mp15-pinctrl.dtsi"
+#include "stm32mp15xxaa-pinctrl.dtsi"
+#include "stm32mp157-m4-srm.dtsi"
+#include "stm32mp157-m4-srm-pinctrl.dtsi"
+#include "stm32mp157d-atk.dtsi"
+
+/ {
+	model = "STMicroelectronics STM32MP157D eval daughter";
+	compatible = "st,stm32mp157d-atk", "st,stm32mp157";
+
+	chosen {
+		stdout-path = "serial0:115200n8";
+	};
+
+	aliases {
+		serial0 = &uart4;
+	};
+
+	reserved-memory {
+		gpu_reserved: gpu@f6000000 {
+			reg = <0xf6000000 0x8000000>;
+			no-map;
+		};
+
+		optee_memory: optee@fe000000 {
+			reg = <0xfe000000 0x02000000>;
+			no-map;
+		};
+	};
+
+	panel_backlight: panel-backlight {
+		compatible = "gpio-backlight";
+		gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>;
+		default-on;
+		status = "okay";
+	};
+
+    atk_pinctrl_lcd {
+        gpior = <&gpioj 6 GPIO_ACTIVE_LOW>;
+        gpiog = <&gpiok 2 GPIO_ACTIVE_LOW>;
+        gpiob = <&gpiok 6 GPIO_ACTIVE_LOW>;
+    };
+
+    panel_rgb: panel-rgb {
+        compatible = "simple-panel";
+        pinctrl-names = "default", "sleep";
+        pinctrl-0 = <&ltdc_pins_b>;
+        pinctrl-1 = <&ltdc_pins_sleep_b>;
+        backlight = <&panel_backlight>;
+        status = "okay";
+
+        port {
+            panel_in_rgb: endpoint {
+                remote-endpoint = <&ltdc_ep0_out>;
+            };
+        };
+    };
+};
+
+&pinctrl {
+   gpio_r:gpio_r {
+        pins {
+            pinmux = <STM32_PINMUX('J', 6, GPIO)>; /* PJ6.GPIO */
+            bias-pull-up;
+            drive-push-pull;
+        };
+    };
+   gpio_g:gpio_g {
+        pins {
+            pinmux = <STM32_PINMUX('K', 2, GPIO)>; /* PK2.GPIO */
+            bias-pull-up;
+            drive-push-pull;
+        };
+    };
+   gpio_b:gpio_b {
+        pins {
+            pinmux = <STM32_PINMUX('K', 6, GPIO)>; /* PK6.GPIO */
+            bias-pull-up;
+            drive-push-pull;
+        };
+    };
+   gpio_beep:gpio_beep {
+        pins {
+            pinmux = <STM32_PINMUX('C', 7, GPIO)>; /* PK6.GPIO */
+            bias-pull-down;
+            drive-push-pull;
+        };
+    };
+};
+
+
+&cpu1{
+	cpu-supply = <&vddcore>;
+};
+
+&gpu {
+	contiguous-area = <&gpu_reserved>;
+	status = "okay";
+};
+
+&iwdg2 {
+    pinctrl-names = "default";
+    pinctrl-0 = <&gpio_r>,<&gpio_g>, <&gpio_b>;
+};
+
+&ltdc {
+	status = "okay";
+
+	port {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		ltdc_ep0_out: endpoint@0 {
+			reg = <0>;
+			remote-endpoint = <&panel_in_rgb>;
+		};
+	};
+};
+
+
+&optee {
+	status = "okay";
+};
diff --git a/arch/arm/dts/stm32mp157d-atk.dtsi b/arch/arm/dts/stm32mp157d-atk.dtsi
new file mode 100644
index 00000000..7cece899
--- /dev/null
+++ b/arch/arm/dts/stm32mp157d-atk.dtsi
@@ -0,0 +1,343 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
+/*
+ * Copyright (C) STMicroelectronics 2017 - All Rights Reserved
+ * Author: Ludovic Barre <ludovic.barre@st.com> for STMicroelectronics.
+ */
+
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/mfd/st,stpmic1.h>
+
+/ {
+	memory@c0000000 {
+		device_type = "memory";
+		reg = <0xC0000000 0x40000000>;
+	};
+
+	reserved-memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		mcuram2: mcuram2@10000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10000000 0x40000>;
+			no-map;
+		};
+
+		vdev0vring0: vdev0vring0@10040000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10040000 0x1000>;
+			no-map;
+		};
+
+		vdev0vring1: vdev0vring1@10041000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10041000 0x1000>;
+			no-map;
+		};
+
+		vdev0buffer: vdev0buffer@10042000 {
+			compatible = "shared-dma-pool";
+			reg = <0x10042000 0x4000>;
+			no-map;
+		};
+
+		mcuram: mcuram@30000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x30000000 0x40000>;
+			no-map;
+		};
+
+		retram: retram@38000000 {
+			compatible = "shared-dma-pool";
+			reg = <0x38000000 0x10000>;
+			no-map;
+		};
+	};
+
+	usb_phy_tuning: usb-phy-tuning {
+		st,hs-dc-level = <2>;
+		st,fs-rftime-tuning;
+		st,hs-rftime-reduction;
+		st,hs-current-trim = <15>;
+		st,hs-impedance-trim = <1>;
+		st,squelch-level = <3>;
+		st,hs-rx-offset = <2>;
+		st,no-lsfs-sc;
+	};
+
+	vddcore: regulator-vddcore {
+        compatible = "regulator-fixed";
+		regulator-name = "vddcore";
+		regulator-min-microvolt = <1200000>;
+		regulator-max-microvolt = <1350000>;
+		regulator-always-on;
+        regulator-boot-on;
+	};
+
+    v3v3: regulator-3p3v {
+        compatible = "regulator-fixed";
+        regulator-name = "v3v3";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        regulator-boot-on;
+    };
+
+    v1v8_audio: regulator-v1v8-audio {
+        compatible = "regulator-fixed";
+        regulator-name = "v1v8_audio";
+        regulator-min-microvolt = <1800000>;
+        regulator-max-microvolt = <1800000>;
+        regulator-always-on;
+        regulator-boot-on;
+    };
+
+    vdd: regulator-vdd {
+        compatible = "regulator-fixed";
+        regulator-name = "vdd";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        regulator-boot-on;
+    };
+
+    vdd_usb: regulator-vdd-usb {
+        compatible = "regulator-fixed";
+        regulator-name = "vdd_usb";
+        regulator-min-microvolt = <3300000>;
+        regulator-max-microvolt = <3300000>;
+        regulator-always-on;
+        regulator-boot-on;
+    };
+
+	vin: vin {
+		compatible = "regulator-fixed";
+		regulator-name = "vin";
+		regulator-min-microvolt = <5000000>;
+		regulator-max-microvolt = <5000000>;
+		regulator-always-on;
+	};
+
+	led {
+		compatible = "gpio-leds";
+
+		red {
+			label = "ide-disk";
+			gpios = <&gpioi 0 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "ide-disk";
+			default-state = "on";
+		};
+
+		blue {
+			label = "heartbeat";
+			gpios = <&gpiof 3 GPIO_ACTIVE_LOW>;
+			linux,default-trigger = "heartbeat";
+			default-state = "on";
+		};
+	};
+
+
+};
+
+&cpu0{
+	cpu-supply = <&vddcore>;
+};
+
+&crc1 {
+	status = "okay";
+};
+
+&dma1 {
+	sram = <&dma_pool>;
+};
+
+&dma2 {
+	sram = <&dma_pool>;
+};
+
+&dts {
+	status = "okay";
+};
+
+&ethernet0 {
+	status = "okay";
+	pinctrl-0 = <&ethernet0_rgmii_pins_a>;
+	pinctrl-1 = <&ethernet0_rgmii_pins_sleep_a>;
+	pinctrl-names = "default", "sleep";
+	phy-mode = "rgmii-id";
+	max-speed = <1000>;
+	phy-handle = <&phy0>;
+
+	mdio0 {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		compatible = "snps,dwmac-mdio";
+		phy0: ethernet-phy@0 {
+			reg = <0>;
+		};
+	};
+};
+
+&hash1 {
+	status = "okay";
+};
+
+&i2c1 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&i2c1_pins_b>;
+	pinctrl-1 = <&i2c1_pins_sleep_b>;
+	i2c-scl-rising-time-ns = <100>;
+	i2c-scl-falling-time-ns = <7>;
+	status = "okay";
+	/delete-property/dmas;
+	/delete-property/dma-names;
+
+	stusb1600@28 {
+		compatible = "st,stusb1600";
+		reg = <0x28>;
+		interrupts = <2 IRQ_TYPE_EDGE_FALLING>;
+		interrupt-parent = <&gpiog>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&stusb1600_pins_a>;
+		status = "okay";
+		vdd-supply = <&vin>;
+
+		connector {
+			compatible = "usb-c-connector";
+			label = "USB-C";
+			power-role = "dual";
+			power-opmode = "default";
+
+			port {
+				con_usbotg_hs_ep: endpoint {
+					remote-endpoint = <&usbotg_hs_ep>;
+				};
+			};
+		};
+	};
+};
+
+&ipcc {
+	status = "okay";
+};
+
+&iwdg2 {
+	timeout-sec = <32>;
+	status = "okay";
+};
+&m4_rproc {
+	memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
+			<&vdev0vring1>, <&vdev0buffer>;
+	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
+	mbox-names = "vq0", "vq1", "shutdown";
+	interrupt-parent = <&exti>;
+	interrupts = <68 1>;
+	wakeup-source;
+	status = "okay";
+};
+
+&pwr_regulators {
+	vdd-supply = <&vdd>;
+	vdd_3v3_usbfs-supply = <&vdd_usb>;
+};
+
+&rng1 {
+	status = "okay";
+};
+
+&rtc {
+	status = "okay";
+};
+
+&sdmmc1 {
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc1_b4_pins_a>;
+	pinctrl-1 = <&sdmmc1_b4_od_pins_a>;
+	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
+	st,neg-edge;
+    broken-cd;
+	bus-width = <4>;
+	vmmc-supply = <&v3v3>;
+	status = "okay";
+};
+
+&sdmmc2 {
+	pinctrl-names = "default", "opendrain", "sleep";
+	pinctrl-0 = <&sdmmc2_b4_pins_a &sdmmc2_d47_pins_a>;
+	pinctrl-1 = <&sdmmc2_b4_od_pins_a &sdmmc2_d47_pins_a>;
+	pinctrl-2 = <&sdmmc2_b4_sleep_pins_a &sdmmc2_d47_sleep_pins_a>;
+	non-removable;
+	st,neg-edge;
+	bus-width = <8>;
+	vmmc-supply = <&v3v3>;
+    keep-power-in-suspend;
+	status = "okay";
+};
+
+&sram {
+	dma_pool: dma_pool@0 {
+		reg = <0x50000 0x10000>;
+		pool;
+	};
+};
+
+&timers6 {
+	status = "okay";
+	/* spare dmas for other usage */
+	/delete-property/dmas;
+	/delete-property/dma-names;
+	timer@5 {
+		status = "okay";
+	};
+};
+
+&uart4 {
+	pinctrl-names = "default", "sleep", "idle";
+	pinctrl-0 = <&uart4_pins_a>;
+	pinctrl-1 = <&uart4_sleep_pins_a>;
+	pinctrl-2 = <&uart4_idle_pins_a>;
+	pinctrl-3 = <&uart4_pins_a>;
+	/delete-property/dmas;
+	/delete-property/dma-names;
+	status = "okay";
+};
+
+&usbh_ehci {
+	phys = <&usbphyc_port0>;
+	status = "okay";
+};
+
+&usbotg_hs {
+	phys = <&usbphyc_port1 0>;
+	phy-names = "usb2-phy";
+	usb-role-switch;
+	status = "okay";
+
+	port {
+		usbotg_hs_ep: endpoint {
+			remote-endpoint = <&con_usbotg_hs_ep>;
+		};
+	};
+};
+
+&usbphyc {
+	status = "okay";
+};
+
+&usbphyc_port0 {
+	phy-supply = <&vdd_usb>;
+	st,phy-tuning = <&usb_phy_tuning>;
+};
+
+&usbphyc_port1 {
+	phy-supply = <&vdd_usb>;
+	st,phy-tuning = <&usb_phy_tuning>;
+};
+
+&vrefbuf {
+	regulator-min-microvolt = <2500000>;
+	regulator-max-microvolt = <2500000>;
+	vdda-supply = <&vdd>;
+	status = "okay";
+};
diff --git a/common/board_r.c b/common/board_r.c
index 54641722..14d65bf1 100644
--- a/common/board_r.c
+++ b/common/board_r.c
@@ -58,11 +58,86 @@
 #if defined(CONFIG_GPIO_HOG)
 #include <asm/gpio.h>
 #endif
+#include <asm-generic/gpio.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
 ulong monitor_flash_len;
 
+#ifdef ALIENTEK_RGB_LCD
+static int atk_set_lcd(void)
+{
+    ofnode node;
+    int ret , i;
+    struct gpio_desc priv_rgb[3];
+    int read_id = 0;
+
+    node = ofnode_path("/atk_pinctrl_lcd");
+    if(!ofnode_valid(node)) {
+        debug("%s: no /atk_pinctrl_lcd node?\n", __func__);
+        return -1;
+    }
+
+    ret = gpio_request_by_name_nodev(node, "gpior", 0,&priv_rgb[0], GPIOD_IS_IN);
+    if(ret) {
+        debug("%s :Error: cannot get GPIO: ret=%d\n", __func__, ret);
+        return ret;
+    }
+
+    ret = gpio_request_by_name_nodev(node, "gpiog", 0,&priv_rgb[1], GPIOD_IS_IN);
+    if(ret) {
+        debug("%s :Error: cannot get GPIO: ret=%d\n", __func__, ret);
+        return ret;
+    }
+
+    ret = gpio_request_by_name_nodev(node, "gpiob", 0,&priv_rgb[2], GPIOD_IS_IN);
+    if(ret) {
+        debug("%s :Error: cannot get GPIO: ret=%d\n", __func__, ret);
+        return ret;
+    }
+
+    for(i = 0; i < 3; i++)
+    {
+        ret = dm_gpio_get_value(&priv_rgb[i]);
+        if(!ret)
+            read_id |= (0x1 << i);
+    }
+    printk("lcd_id  = %02d \n", read_id);
+    switch(read_id){
+        case 0:
+            env_set("lcd_bmp","alientek_480x272.bmp");
+            env_set("lcd_id", "0");
+            break;
+        case 1:
+            env_set("lcd_bmp","alientek_800x480.bmp");
+            env_set("lcd_id", "1");
+            break;
+        case 4:
+            env_set("lcd_bmp","alientek_800x480.bmp");
+            env_set("lcd_id", "4");
+            break;
+        case 2:
+            env_set("lcd_bmp","alientek_1024x600.bmp");
+            env_set("lcd_id", "2");
+            break;
+        case 5:
+            env_set("lcd_bmp","alientek_1280x800.bmp");
+            env_set("lcd_id", "5");
+            break;
+        default :
+            break;
+    }
+
+    ret=gpio_free_list_nodev(&priv_rgb[0], 3);
+    if (ret) {
+        debug("%s :Error: cannot Free GPIO: ret=%d\n", __func__, ret);
+        return ret;
+    }
+
+    return 0;
+}
+#endif
+
 __weak int board_flash_wp_on(void)
 {
 	/*
@@ -638,6 +713,10 @@ static int run_main_loop(void)
 #ifdef CONFIG_SANDBOX
 	sandbox_main_loop_init();
 #endif
+
+#ifdef ALIENTEK_RGB_LCD
+    atk_set_lcd();
+#endif
 	/* main_loop() can return to retry autoboot, if so just run it again */
 	for (;;)
 		main_loop();
diff --git a/common/image-fdt.c b/common/image-fdt.c
index 48388488..5a07e2c8 100644
--- a/common/image-fdt.c
+++ b/common/image-fdt.c
@@ -156,9 +156,11 @@ int boot_relocate_fdt(struct lmb *lmb, char **of_flat_tree, ulong *of_size)
 	void	*of_start = NULL;
 	char	*fdt_high;
 	ulong	of_len = 0;
-	int	err;
+	int	err,nodeoffset;
 	int	disable_relocation = 0;
-
+#ifdef ALIENTEK_RGB_LCD
+    int timings_id = (int)((*(env_get("lcd_id"))) - '0');
+#endif
 	/* nothing to do */
 	if (*of_size == 0)
 		return 0;
@@ -167,7 +169,15 @@ int boot_relocate_fdt(struct lmb *lmb, char **of_flat_tree, ulong *of_size)
 		fdt_error("image is not a fdt");
 		goto error;
 	}
-
+#ifdef ALIENTEK_RGB_LCD
+	nodeoffset = fdt_path_offset(fdt_blob, "/lcd_id");
+	if (nodeoffset < 0)
+    {
+        printf("couldn't find /lcd_id\n");
+    }
+
+	fdt_setprop_u32(fdt_blob, nodeoffset, "select_id", timings_id);
+#endif
 	/* position on a 4K boundary before the alloc_current */
 	/* Pad the FDT by a specified amount */
 	of_len = *of_size + CONFIG_SYS_FDT_PAD;
diff --git a/configs/stm32mp157d_atk_defconfig b/configs/stm32mp157d_atk_defconfig
new file mode 100644
index 00000000..e248b7d1
--- /dev/null
+++ b/configs/stm32mp157d_atk_defconfig
@@ -0,0 +1,145 @@
+CONFIG_ARM=y
+CONFIG_ARCH_STM32MP=y
+CONFIG_SYS_MALLOC_F_LEN=0x3000
+CONFIG_ENV_OFFSET=0x280000
+CONFIG_TARGET_ST_STM32MP15x=y
+CONFIG_CMD_STM32PROG=y
+CONFIG_ENV_SECT_SIZE=0x40000
+CONFIG_ENV_OFFSET_REDUND=0x2C0000
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_FIT=y
+CONFIG_BOOTCOMMAND="run bootcmd_stm32mp"
+CONFIG_SYS_PROMPT="STM32MP> "
+# CONFIG_CMD_BOOTD is not set
+CONFIG_CMD_DTIMG=y
+# CONFIG_CMD_ELF is not set
+# CONFIG_CMD_IMI is not set
+# CONFIG_CMD_XIMG is not set
+# CONFIG_CMD_EXPORTENV is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_ERASEENV=y
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_ADC=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_REMOTEPROC=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_CMD_UBI=y
+CONFIG_DEFAULT_DEVICE_TREE="stm32mp157c-ev1"
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_ENV_IS_IN_SPI_FLASH=y
+CONFIG_ENV_IS_IN_UBI=y
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
+CONFIG_ENV_UBI_PART="UBI"
+CONFIG_ENV_UBI_VOLUME="uboot_config"
+CONFIG_ENV_UBI_VOLUME_REDUND="uboot_config_r"
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_STM32_ADC=y
+CONFIG_CLK_SCMI=y
+CONFIG_SET_DFU_ALT_INFO=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0xC0000000
+CONFIG_FASTBOOT_BUF_SIZE=0x02000000
+CONFIG_FASTBOOT_USB_DEV=1
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_FLASH_MMC_DEV=1
+CONFIG_FASTBOOT_MMC_BOOT_SUPPORT=y
+CONFIG_FASTBOOT_MMC_BOOT1_NAME="mmc1boot0"
+CONFIG_FASTBOOT_MMC_BOOT2_NAME="mmc1boot1"
+CONFIG_FASTBOOT_MMC_USER_SUPPORT=y
+CONFIG_FASTBOOT_MMC_USER_NAME="mmc1"
+CONFIG_FASTBOOT_CMD_OEM_FORMAT=y
+CONFIG_FASTBOOT_CMD_OEM_PARTCONF=y
+CONFIG_FASTBOOT_CMD_OEM_BOOTBUS=y
+CONFIG_GPIO_HOG=y
+CONFIG_DM_HWSPINLOCK=y
+CONFIG_HWSPINLOCK_STM32=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_STM32F7=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
+CONFIG_DM_MAILBOX=y
+CONFIG_STM32_IPCC=y
+CONFIG_ARM_SMC_MAILBOX=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_STM32_SDMMC2=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_SYS_MTDPARTS_RUNTIME=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_NAND_STM32_FMC2=y
+CONFIG_MTD_SPI_NAND=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_WINBOND=y
+# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PHY_REALTEK=y
+CONFIG_DM_ETH=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_PHY=y
+CONFIG_PHY_STM32_USBPHYC=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_STMFX=y
+CONFIG_DM_PMIC=y
+CONFIG_PMIC_STPMIC1=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_REGULATOR_STM32_VREFBUF=y
+CONFIG_DM_REGULATOR_STPMIC1=y
+CONFIG_REMOTEPROC_STM32_COPRO=y
+CONFIG_RESET_SCMI=y
+CONFIG_DM_RTC=y
+CONFIG_RTC_STM32=y
+CONFIG_SERIAL_RX_BUFFER=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_STM32_QSPI=y
+CONFIG_STM32_SPI=y
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+# CONFIG_OPTEE_TA_AVB is not set
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_GENERIC=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="STMicroelectronics"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0483
+CONFIG_USB_GADGET_PRODUCT_NUM=0x5720
+CONFIG_USB_GADGET_DWC2_OTG=y
+CONFIG_DM_VIDEO=y
+CONFIG_BACKLIGHT_GPIO=y
+CONFIG_VIDEO_BPP8=y
+CONFIG_VIDEO_BPP16=y
+CONFIG_VIDEO_BPP32=y
+CONFIG_VIDEO_LCD_ORISETECH_OTM8009A=y
+CONFIG_VIDEO_LCD_RAYDIUM_RM68200=y
+CONFIG_VIDEO_STM32=y
+CONFIG_VIDEO_STM32_DSI=y
+CONFIG_VIDEO_STM32_MAX_XRES=1280
+CONFIG_VIDEO_STM32_MAX_YRES=800
+CONFIG_WDT=y
+CONFIG_WDT_STM32MP=y
+CONFIG_ERRNO_STR=y
+CONFIG_FDT_FIXUP_PARTITIONS=y
diff --git a/configs/stm32mp15_atk_trusted_defconfig b/configs/stm32mp15_atk_trusted_defconfig
new file mode 100644
index 00000000..e248b7d1
--- /dev/null
+++ b/configs/stm32mp15_atk_trusted_defconfig
@@ -0,0 +1,145 @@
+CONFIG_ARM=y
+CONFIG_ARCH_STM32MP=y
+CONFIG_SYS_MALLOC_F_LEN=0x3000
+CONFIG_ENV_OFFSET=0x280000
+CONFIG_TARGET_ST_STM32MP15x=y
+CONFIG_CMD_STM32PROG=y
+CONFIG_ENV_SECT_SIZE=0x40000
+CONFIG_ENV_OFFSET_REDUND=0x2C0000
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_FIT=y
+CONFIG_BOOTCOMMAND="run bootcmd_stm32mp"
+CONFIG_SYS_PROMPT="STM32MP> "
+# CONFIG_CMD_BOOTD is not set
+CONFIG_CMD_DTIMG=y
+# CONFIG_CMD_ELF is not set
+# CONFIG_CMD_IMI is not set
+# CONFIG_CMD_XIMG is not set
+# CONFIG_CMD_EXPORTENV is not set
+# CONFIG_CMD_IMPORTENV is not set
+CONFIG_CMD_ERASEENV=y
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_ADC=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_REMOTEPROC=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_CMD_UBI=y
+CONFIG_DEFAULT_DEVICE_TREE="stm32mp157c-ev1"
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_ENV_IS_IN_SPI_FLASH=y
+CONFIG_ENV_IS_IN_UBI=y
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
+CONFIG_ENV_UBI_PART="UBI"
+CONFIG_ENV_UBI_VOLUME="uboot_config"
+CONFIG_ENV_UBI_VOLUME_REDUND="uboot_config_r"
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_STM32_ADC=y
+CONFIG_CLK_SCMI=y
+CONFIG_SET_DFU_ALT_INFO=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0xC0000000
+CONFIG_FASTBOOT_BUF_SIZE=0x02000000
+CONFIG_FASTBOOT_USB_DEV=1
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_FLASH_MMC_DEV=1
+CONFIG_FASTBOOT_MMC_BOOT_SUPPORT=y
+CONFIG_FASTBOOT_MMC_BOOT1_NAME="mmc1boot0"
+CONFIG_FASTBOOT_MMC_BOOT2_NAME="mmc1boot1"
+CONFIG_FASTBOOT_MMC_USER_SUPPORT=y
+CONFIG_FASTBOOT_MMC_USER_NAME="mmc1"
+CONFIG_FASTBOOT_CMD_OEM_FORMAT=y
+CONFIG_FASTBOOT_CMD_OEM_PARTCONF=y
+CONFIG_FASTBOOT_CMD_OEM_BOOTBUS=y
+CONFIG_GPIO_HOG=y
+CONFIG_DM_HWSPINLOCK=y
+CONFIG_HWSPINLOCK_STM32=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_STM32F7=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
+CONFIG_DM_MAILBOX=y
+CONFIG_STM32_IPCC=y
+CONFIG_ARM_SMC_MAILBOX=y
+CONFIG_DM_MMC=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_STM32_SDMMC2=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_SYS_MTDPARTS_RUNTIME=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_NAND_STM32_FMC2=y
+CONFIG_MTD_SPI_NAND=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_WINBOND=y
+# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PHY_REALTEK=y
+CONFIG_DM_ETH=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_PHY=y
+CONFIG_PHY_STM32_USBPHYC=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_STMFX=y
+CONFIG_DM_PMIC=y
+CONFIG_PMIC_STPMIC1=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_REGULATOR_STM32_VREFBUF=y
+CONFIG_DM_REGULATOR_STPMIC1=y
+CONFIG_REMOTEPROC_STM32_COPRO=y
+CONFIG_RESET_SCMI=y
+CONFIG_DM_RTC=y
+CONFIG_RTC_STM32=y
+CONFIG_SERIAL_RX_BUFFER=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_STM32_QSPI=y
+CONFIG_STM32_SPI=y
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+# CONFIG_OPTEE_TA_AVB is not set
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_GENERIC=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="STMicroelectronics"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0483
+CONFIG_USB_GADGET_PRODUCT_NUM=0x5720
+CONFIG_USB_GADGET_DWC2_OTG=y
+CONFIG_DM_VIDEO=y
+CONFIG_BACKLIGHT_GPIO=y
+CONFIG_VIDEO_BPP8=y
+CONFIG_VIDEO_BPP16=y
+CONFIG_VIDEO_BPP32=y
+CONFIG_VIDEO_LCD_ORISETECH_OTM8009A=y
+CONFIG_VIDEO_LCD_RAYDIUM_RM68200=y
+CONFIG_VIDEO_STM32=y
+CONFIG_VIDEO_STM32_DSI=y
+CONFIG_VIDEO_STM32_MAX_XRES=1280
+CONFIG_VIDEO_STM32_MAX_YRES=800
+CONFIG_WDT=y
+CONFIG_WDT_STM32MP=y
+CONFIG_ERRNO_STR=y
+CONFIG_FDT_FIXUP_PARTITIONS=y
diff --git a/drivers/net/phy/phy.c b/drivers/net/phy/phy.c
index 80a7664e..62bc7d0c 100644
--- a/drivers/net/phy/phy.c
+++ b/drivers/net/phy/phy.c
@@ -209,6 +209,95 @@ int genphy_config_aneg(struct phy_device *phydev)
 	return result;
 }
 
+/***************alientek zuozhongkai add 2021/4/23****************/
+#define YT8511_REG_DEBUG_ADDR_OFFSET		0x1e
+#define YT8511_REG_DEBUG_DATA				0x1f
+
+static int yt8511_rd_ext(struct phy_device *phydev, u32 regnum)
+{
+	int val;
+
+	phy_write(phydev, MDIO_DEVAD_NONE, YT8511_REG_DEBUG_ADDR_OFFSET, regnum);
+	val = phy_read(phydev, MDIO_DEVAD_NONE, YT8511_REG_DEBUG_DATA);
+
+	return val;
+}
+
+static int yt8511_wr_ext(struct phy_device *phydev, u32 regnum, u16 val)
+{
+	int ret;
+
+	ret = phy_write(phydev, MDIO_DEVAD_NONE, YT8511_REG_DEBUG_ADDR_OFFSET, regnum);
+	ret = phy_write(phydev, MDIO_DEVAD_NONE, YT8511_REG_DEBUG_DATA, val);
+
+	return ret;
+}
+
+int yt8511_config_txdelay(struct phy_device *phydev, u8 delay)
+{
+        int ret;
+        int val;
+
+        /* disable auto sleep */
+        val = yt8511_rd_ext(phydev, 0x27);
+        if (val < 0)
+                return val;
+
+        val &= (~BIT(15));
+
+        ret = yt8511_wr_ext(phydev, 0x27, val);
+        if (ret < 0)
+                return ret;
+
+        /* enable RXC clock when no wire plug */
+        val = yt8511_rd_ext(phydev, 0xc);
+        if (val < 0)
+                return val;
+
+        /* ext reg 0xc b[7:4]
+		Tx Delay time = 150ps * N – 250ps
+        */
+        val &= ~(0xf << delay);
+        ret = yt8511_wr_ext(phydev, 0xc, val);
+        val = yt8511_rd_ext(phydev, 0xc);
+
+        return ret;
+}
+
+int yt8511_config_out_125m(struct phy_device *phydev)
+{
+        int ret;
+        int val;
+
+		/* disable auto sleep */
+        val = yt8511_rd_ext(phydev, 0x27);
+        if (val < 0)
+                return val;
+
+        val &= (~BIT(15));
+
+        ret = yt8511_wr_ext(phydev, 0x27, val);
+        if (ret < 0)
+                return ret;
+
+        /* enable RXC clock when no wire plug */
+        val = yt8511_rd_ext(phydev, 0xc);
+        if (val < 0)
+                return val;
+
+        /* ext reg 0xc.b[2:1]
+        00-----25M from pll;
+        01---- 25M from xtl;(default)
+        10-----62.5M from pll;
+        11----125M from pll(here set to this value)
+        */
+        val |= (3 << 1);
+        ret = yt8511_wr_ext(phydev, 0xc, val);
+
+        return ret;
+}
+/*********************end add***************************/
+
 /**
  * genphy_update_link - update link status in @phydev
  * @phydev: target phy_device struct
@@ -221,6 +310,17 @@ int genphy_update_link(struct phy_device *phydev)
 {
 	unsigned int mii_reg;
 
+	/************alientek zuozhongkai add 2021/4/23********/
+	unsigned int phyid1, phyid2;
+
+	phyid1 = phy_read(phydev, MDIO_DEVAD_NONE, MII_PHYSID1);
+	phyid2 = phy_read(phydev, MDIO_DEVAD_NONE, MII_PHYSID2);
+	if((phyid1 == 0X0) && (phyid2 == 0x10a)) {
+		yt8511_config_out_125m(phydev);
+		yt8511_config_txdelay(phydev, 7);
+	}
+	/*********************end add***************************/
+
 	/*
 	 * Wait if the link is up, and autonegotiation is in progress
 	 * (ie - we're capable and it's not done)
@@ -548,6 +648,7 @@ int phy_init(void)
 #ifdef CONFIG_PHY_XILINX_GMII2RGMII
 	phy_xilinx_gmii2rgmii_init();
 #endif
+
 	genphy_init();
 
 	return 0;
@@ -1010,10 +1111,21 @@ struct phy_device *phy_connect(struct mii_dev *bus, int addr,
 	if (!phydev)
 		phydev = phy_find_by_mask(bus, mask, interface);
 
+	/***********zuozhongkai add 2021/4/23****************/
+	if (!phydev) /* 如果还没有获取到phy_device，尝试YT8511 	*/
+	{
+		addr = 0;
+		mask = (addr >= 0) ? (1 << addr) : 0xffffffff;
+		phydev = phy_find_by_mask(bus, mask, interface);
+	}
+	/******************end add****************************/
+
 	if (phydev)
 		phy_connect_dev(phydev, dev);
 	else
 		printf("Could not get PHY for %s: addr %d\n", bus->name, addr);
+
+
 	return phydev;
 }
 
diff --git a/drivers/video/stm32/stm32_ltdc.c b/drivers/video/stm32/stm32_ltdc.c
index 59ff692b..37d9c53c 100644
--- a/drivers/video/stm32/stm32_ltdc.c
+++ b/drivers/video/stm32/stm32_ltdc.c
@@ -151,6 +151,99 @@ enum stm32_ltdc_pix_fmt {
 	PF_AL88
 };
 
+#ifdef ALIENTEK_RGB_LCD
+enum atk_lcd_select {
+    ATK_4x3_480x272 = 0,
+    ATK_7_800x480,
+    ATK_7_1024x600,
+    ATK_4x3_800x480 = 4,
+    ATK_10_1280x800,
+};
+
+static const struct display_timing timing_4x3_480x272 = {
+	.pixelclock = {.min = 9000000, .typ = 9000000, .max = 9000000,},
+	.hactive = {.min = 480, .typ = 480, .max = 480,},
+	.hfront_porch = {.min = 5, .typ = 5, .max = 5,},
+	.hback_porch = {.min = 40, .typ = 40, .max = 40,},
+	.hsync_len = {.min = 1, .typ = 1, .max = 1,},
+	.vactive = {.min = 272, .typ = 272, .max = 272,},
+	.vfront_porch = {.min = 8, .typ = 8, .max = 8,},
+	.vback_porch = {.min = 8, .typ = 8, .max = 8,},
+	.vsync_len = {.min = 1, .typ = 1, .max = 1,},
+};
+
+static const struct display_timing timing_4x3_800x480 = {
+	.pixelclock = {.min = 33300000, .typ = 33300000, .max = 33300000,},
+	.hactive = {.min = 800, .typ = 800, .max = 800,},
+	.hfront_porch = {.min = 40, .typ = 40, .max = 40,},
+	.hback_porch = {.min = 88, .typ = 88, .max = 88,},
+	.hsync_len = {.min = 48, .typ = 48, .max = 48,},
+	.vactive = {.min = 480, .typ = 480, .max = 480,},
+	.vfront_porch = {.min = 13, .typ = 13, .max = 13,},
+	.vback_porch = {.min = 32, .typ = 32, .max = 32,},
+	.vsync_len = {.min = 3, .typ = 3, .max = 3,},
+};
+
+static const struct display_timing timing_7_800x480 = {
+	.pixelclock = {.min = 33300000, .typ = 33300000, .max = 33300000,},
+	.hactive = {.min = 800, .typ = 800, .max = 800,},
+	.hfront_porch = {.min = 210, .typ = 210, .max = 210,},
+	.hback_porch = {.min = 46, .typ = 46, .max = 46,},
+	.hsync_len = {.min = 2, .typ = 2, .max = 2,},
+	.vactive = {.min = 480, .typ = 480, .max = 480,},
+	.vfront_porch = {.min = 22, .typ = 22, .max = 22,},
+	.vback_porch = {.min = 23, .typ = 23, .max = 23,},
+	.vsync_len = {.min = 2, .typ = 2, .max = 2,},
+};
+
+static const struct display_timing timing_7_1024x600 = {
+	.pixelclock = {.min = 51200000, .typ = 51200000, .max = 51200000,},
+	.hactive = {.min = 1024, .typ = 1024, .max = 1024,},
+	.hfront_porch = {.min = 160, .typ = 160, .max = 160,},
+	.hback_porch = {.min = 140, .typ = 140, .max = 140,},
+	.hsync_len = {.min = 20, .typ = 20, .max = 20,},
+	.vactive = {.min = 600, .typ = 600, .max = 600,},
+	.vfront_porch = {.min = 12, .typ = 12, .max = 12,},
+	.vback_porch = {.min = 20, .typ = 20, .max = 20,},
+	.vsync_len = {.min = 3, .typ = 3, .max = 3,},
+};
+
+static const struct display_timing timing_10_1280x800 = {
+	.pixelclock = {.min = 71100000, .typ = 71100000, .max = 71100000,},
+	.hactive = {.min = 1280, .typ = 1280, .max = 1280,},
+	.hfront_porch = {.min = 70, .typ = 70, .max = 70,},
+	.hback_porch = {.min = 80, .typ = 80, .max = 80,},
+	.hsync_len = {.min = 10, .typ = 10, .max = 10,},
+	.vactive = {.min = 800, .typ = 800, .max = 800,},
+	.vfront_porch = {.min = 10, .typ = 10, .max = 10,},
+	.vback_porch = {.min = 10, .typ = 10, .max = 10,},
+	.vsync_len = {.min = 3, .typ = 3, .max = 3,},
+};
+
+static int atk_panel_get_display_timing(int lcd_id,
+                                        struct display_timing *timings){
+    switch(lcd_id){
+    case ATK_4x3_480x272 :
+		memcpy(timings, &timing_4x3_480x272, sizeof(*timings));
+	    break;
+    case ATK_7_800x480 :
+		memcpy(timings, &timing_7_800x480, sizeof(*timings));
+        break;
+    case ATK_4x3_800x480 :
+		memcpy(timings, &timing_4x3_800x480, sizeof(*timings));
+        break;
+    case ATK_7_1024x600 :
+		memcpy(timings, &timing_7_1024x600, sizeof(*timings));
+        break;
+    case ATK_10_1280x800 :
+		memcpy(timings, &timing_10_1280x800, sizeof(*timings));
+        break;
+    default :
+        break;
+    }
+	return 0;
+}
+#endif
 /* TODO add more color format support */
 static u32 stm32_ltdc_get_pixel_format(enum video_log2_bpp l2bpp)
 {
@@ -335,6 +428,7 @@ static int stm32_ltdc_probe(struct udevice *dev)
 	struct clk pclk;
 	struct reset_ctl rst;
 	int ret;
+    int timings_id = (int)((*(env_get("lcd_id"))) - '0');
 
 	priv->regs = (void *)dev_read_addr(dev);
 	if ((fdt_addr_t)priv->regs == FDT_ADDR_T_NONE) {
@@ -342,6 +436,11 @@ static int stm32_ltdc_probe(struct udevice *dev)
 		return -EINVAL;
 	}
 
+#ifdef ALIENTEK_RGB_LCD
+	if(timings_id == 7)
+		return 0;
+#endif
+
 	ret = clk_get_by_index(dev, 0, &pclk);
 	if (ret) {
 		dev_err(dev, "peripheral clock get error %d\n", ret);
@@ -361,7 +460,11 @@ static int stm32_ltdc_probe(struct udevice *dev)
 		return ret;
 	}
 
+#ifdef ALIENTEK_RGB_LCD
+	ret=atk_panel_get_display_timing(timings_id, &timings);
+#else
 	ret = panel_get_display_timing(panel, &timings);
+#endif
 	if (ret) {
 		ret = fdtdec_decode_display_timing(gd->fdt_blob,
 						   dev_of_offset(panel),
diff --git a/include/config_distro_bootcmd.h b/include/config_distro_bootcmd.h
index fc0935fa..4db9f8aa 100644
--- a/include/config_distro_bootcmd.h
+++ b/include/config_distro_bootcmd.h
@@ -453,7 +453,13 @@
 			"fi; "                                            \
 		"done\0"                                                  \
 	\
+    "lcd_id=0\0"            \
+    "lcd_bmp=alientek_480x272.bmp\0"               \
+    "select_lcd_id="                                \
+        "ext4load mmc ${devnum}:${distro_bootpart} c4300000 ${lcd_bmp};"                 \
+        "bmp display c4300000;\0"                  \
 	"scan_dev_for_boot="                                              \
+        "run select_lcd_id;"                                \
 		"echo Scanning ${devtype} "                               \
 				"${devnum}:${distro_bootpart}...; "       \
 		"for prefix in ${boot_prefixes}; do "                     \
diff --git a/include/configs/stm32mp1.h b/include/configs/stm32mp1.h
index 7b4fe484..279dcc73 100644
--- a/include/configs/stm32mp1.h
+++ b/include/configs/stm32mp1.h
@@ -39,6 +39,9 @@
 #define CONFIG_SETUP_MEMORY_TAGS
 #define CONFIG_INITRD_TAG
 
+/* BOOT */
+#define CONFIG_CMD_BOOTD
+
 /*
  * For booting Linux, use the first 256 MB of memory, since this is
  * the maximum mapped by the Linux kernel during initialization.
@@ -93,6 +96,7 @@
 #define CONFIG_BMP_32BPP
 #endif
 
+#define ALIENTEK_RGB_LCD
 /*****************************************************************************/
 #ifdef CONFIG_DISTRO_DEFAULTS
 /*****************************************************************************/
-- 
2.17.1

